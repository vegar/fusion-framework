import{_ as u}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as g,a as p,w as s,b as a,d as n,e as l,r}from"./app.8852e1cf.js";const b={},h=a("h2",{id:"concept",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#concept","aria-hidden":"true"},"#"),n(" Concept")],-1),m=a("p",null,"Bookmarks are used to save the state of an application at a specific point in time, so that users can easily return to that state later. A bookmark is for any application, as long that it has been enabled in the given environment. The bookmark module is created to orchestrate this behavior.",-1),f=l(`<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> enableContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@equinor/fusion-framework-module-bookmark&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Some portal configuration</span>
    <span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">setSourceSystem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            subSystem<span class="token operator">:</span> <span class="token string">&#39;fusion&#39;</span><span class="token punctuation">,</span>
            identifier<span class="token operator">:</span> <span class="token string">&#39;fusion-classic&#39;</span><span class="token punctuation">,</span>
            name<span class="token operator">:</span> <span class="token string">&#39;Fusion Classic&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// more configuration...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="bookmarkprovider" tabindex="-1"><a class="header-anchor" href="#bookmarkprovider" aria-hidden="true">#</a> BookmarkProvider</h2><p>The public properties of the class are:</p><ul><li>bookmarkClient: an instance of the BookmarkClient class, which is used to interact with the bookmarks API.</li><li>currentBookmark: the currently selected bookmark.</li><li>bookmarks$: an observable stream of all bookmarks.</li><li>currentBookmark$: an observable stream of the current bookmark.</li></ul><p>BookmarkProvider has several public methods:</p><h3 id="public-functions" tabindex="-1"><a class="header-anchor" href="#public-functions" aria-hidden="true">#</a> Public Functions</h3><h4 id="addstatecreator" tabindex="-1"><a class="header-anchor" href="#addstatecreator" aria-hidden="true">#</a> addStateCreator</h4><p>The state creator is used to collect the state stored in a bookmark. and by adding a creator will enable the bookmark functionality for an application this is used. cb - For creating the bookmark payload, this should ne wrapped in a useCallback, payload return can be a partial.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">addStateCreator</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> CreateBookmarkFn<span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span><span class="token punctuation">,</span> key<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">keyof</span> TData<span class="token punctuation">)</span><span class="token operator">:</span> VoidFunction
</code></pre></div><h4 id="getallbookmarks-getallbookmarksasync" tabindex="-1"><a class="header-anchor" href="#getallbookmarks-getallbookmarksasync" aria-hidden="true">#</a> getAllBookmarks / getAllBookmarksAsync</h4><p>Function for resolving all bookmarks for the current sub system.</p>`,12),y=a("div",{class:"language-typescript","data-ext":"ts"},[a("pre",{class:"language-typescript"},[a("code",null,[a("span",{class:"token function"},"getAllBookmarksAsync"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token builtin"},"Promise"),a("span",{class:"token operator"},"<"),a("span",{class:"token builtin"},"Array"),a("span",{class:"token operator"},"<"),n("Bookmark"),a("span",{class:"token operator"},">>"),a("span",{class:"token punctuation"},";"),n(`
`)])])],-1),v=a("div",{class:"language-typescript","data-ext":"ts"},[a("pre",{class:"language-typescript"},[a("code",null,[a("span",{class:"token function"},"getAllBookmarks"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),n(" Observable"),a("span",{class:"token operator"},"<"),a("span",{class:"token builtin"},"Array"),a("span",{class:"token operator"},"<"),n("Bookmark"),a("span",{class:"token operator"},">>"),a("span",{class:"token punctuation"},";"),n(`
`)])])],-1),B=l(`<h4 id="createbookmark" tabindex="-1"><a class="header-anchor" href="#createbookmark" aria-hidden="true">#</a> createBookmark</h4><p>Creates a new bookmark with the given arguments, and utilizes teh provided stateCreator to create the bookmark payload.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">createBookmark</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> isShared<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Bookmark<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">:</span>
</code></pre></div><h4 id="getbookmarkbyid" tabindex="-1"><a class="header-anchor" href="#getbookmarkbyid" aria-hidden="true">#</a> getBookmarkById</h4><p>Function for resolving a bookmark and the bookmarks payload.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">getBookmarkById</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>bookmarkId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Bookmark<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="updatebookmark-updatebookmarkasync" tabindex="-1"><a class="header-anchor" href="#updatebookmark-updatebookmarkasync" aria-hidden="true">#</a> updateBookmark / updateBookmarkAsync</h4><p>Function for updating bookmark a bookmark when successful this will update the bookmark list.</p>`,8),x=a("div",{class:"language-typescript","data-ext":"ts"},[a("pre",{class:"language-typescript"},[a("code",null,[n(),a("span",{class:"token generic-function"},[a("span",{class:"token function"},"updateBookmarkAsync"),a("span",{class:"token generic class-name"},[a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">")])]),a("span",{class:"token punctuation"},"("),n("bookmark"),a("span",{class:"token operator"},":"),n(" PatchBookmark"),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},","),n(" options"),a("span",{class:"token operator"},":"),n(" UpdateBookmarkOptions"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token builtin"},"Promise"),a("span",{class:"token operator"},"<"),n("Bookmark"),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">"),n(),a("span",{class:"token operator"},"|"),n(),a("span",{class:"token keyword"},"undefined"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},";"),n(`
`)])])],-1),w=a("div",{class:"language-typescript","data-ext":"ts"},[a("pre",{class:"language-typescript"},[a("code",null,[a("span",{class:"token generic-function"},[a("span",{class:"token function"},"updateBookmark"),a("span",{class:"token generic class-name"},[a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">")])]),a("span",{class:"token punctuation"},"("),n("bookmark"),a("span",{class:"token operator"},":"),n(" Bookmark"),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),n(" Observable"),a("span",{class:"token operator"},"<"),n("Bookmark"),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">>"),a("span",{class:"token punctuation"},";"),n(`
`)])])],-1),A=a("h4",{id:"deletebookmarkbyid-deletebookmarkbyidasync",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#deletebookmarkbyid-deletebookmarkbyidasync","aria-hidden":"true"},"#"),n(" deleteBookmarkById / deleteBookmarkByIdAsync")],-1),_=a("p",null,"Function for deleting a bookmark by the given identification, When successful this will update the bookmark list automatically.",-1),C=a("div",{class:"language-typescript","data-ext":"ts"},[a("pre",{class:"language-typescript"},[a("code",null,[n("    "),a("span",{class:"token function"},"deleteBookmarkByIdAsync"),a("span",{class:"token punctuation"},"("),n("bookmarkId"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token builtin"},"Promise"),a("span",{class:"token operator"},"<"),a("span",{class:"token builtin"},"string"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},";"),n(`
`)])])],-1),I=a("div",{class:"language-TS","data-ext":"TS"},[a("pre",{class:"language-TS"},[a("code",null,`    deleteBookmarkById(bookmarkId: string): Observable<string>;
`)])],-1),T=l(`<h4 id="setcurrentbookmark" tabindex="-1"><a class="header-anchor" href="#setcurrentbookmark" aria-hidden="true">#</a> setCurrentBookmark</h4><p>Function for setting the current bookmark, when successful this will update the bookmark list.</p><p>If not provided the current bookmark state will be set to undefined.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">setCurrentBookmark</span><span class="token generic class-name"><span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>idOrItem<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Bookmark<span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="addbookmarkfavoriteasync" tabindex="-1"><a class="header-anchor" href="#addbookmarkfavoriteasync" aria-hidden="true">#</a> addBookmarkFavoriteAsync</h4><p>A bookmark can be sheared with other users, when reserving a sheared bookmark this can be added to you collection of bookmarks. Function for adding external bookmark to users bookmarks .</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">addBookmarkFavoriteAsync</span><span class="token punctuation">(</span>bookmarkId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="removebookmarkfavoriteasync" tabindex="-1"><a class="header-anchor" href="#removebookmarkfavoriteasync" aria-hidden="true">#</a> removeBookmarkFavoriteAsync</h4><p>Function for removing external bookmark to user&#39;s bookmarks.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">removeBookmarkFavoriteAsync</span><span class="token punctuation">(</span>bookmarkId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="verifybookmarkfavoriteasync" tabindex="-1"><a class="header-anchor" href="#verifybookmarkfavoriteasync" aria-hidden="true">#</a> verifyBookmarkFavoriteAsync</h4><p>Function for verifying that a bookmark belongs to the current user.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">verifyBookmarkFavoriteAsync</span><span class="token punctuation">(</span>bookmarkId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="dispose" tabindex="-1"><a class="header-anchor" href="#dispose" aria-hidden="true">#</a> dispose</h4><p>disposes of the class and unsubscribes all subscriptions.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token operator">:</span>
</code></pre></div><h3 id="configuration-options" tabindex="-1"><a class="header-anchor" href="#configuration-options" aria-hidden="true">#</a> Configuration Options</h3><h4 id="setsourcesystem" tabindex="-1"><a class="header-anchor" href="#setsourcesystem" aria-hidden="true">#</a> setSourceSystem</h4><p>This will sett the SourceSystem used when creating a new bookmark, used as the identifier frr the current client. Only used in app shell / portal configuration.</p><blockquote><p>@param {SourceSystem} sourceSystem</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SourceSystem</span> <span class="token punctuation">{</span>
    identifier<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    subSystem<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></blockquote><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token function">setSourceSystem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        subSystem<span class="token operator">:</span> <span class="token string">&#39;fusion&#39;</span><span class="token punctuation">,</span>
        identifier<span class="token operator">:</span> <span class="token string">&#39;fusion-classic&#39;</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span> <span class="token string">&#39;Fusion Classic&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="setbookmarkidresolver" tabindex="-1"><a class="header-anchor" href="#setbookmarkidresolver" aria-hidden="true">#</a> setBookmarkIdResolver</h4><p>Used to over write the default Url id resolving.</p><blockquote><p>@param {(() =&gt; string | null)} fn - Resolver for bookmarkId</p></blockquote><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code>    <span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">setBookmarkIdResolver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;bookmarkId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="setcurrentappidresolver" tabindex="-1"><a class="header-anchor" href="#setcurrentappidresolver" aria-hidden="true">#</a> setCurrentAppIdResolver</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code>    <span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> appModule <span class="token operator">=</span> <span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">requireInstance</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span>
        builder<span class="token punctuation">.</span><span class="token function">setCurrentAppIdResolver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> appModule<span class="token punctuation">.</span>current<span class="token operator">?.</span>appKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="seteventprovider" tabindex="-1"><a class="header-anchor" href="#seteventprovider" aria-hidden="true">#</a> setEventProvider</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code>    <span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">requireInstance</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">)</span>
        builder<span class="token punctuation">.</span><span class="token function">setEventProvider</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h4 id="setcurrentappstatecreator" tabindex="-1"><a class="header-anchor" href="#setcurrentappstatecreator" aria-hidden="true">#</a> setCurrentAppStateCreator</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code>    <span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> appProvider <span class="token operator">=</span> <span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">requireInstance</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span>

        builder<span class="token punctuation">.</span><span class="token function">setCurrentAppStateCreator</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appProvider<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

                <span class="token keyword">const</span> currentAppBookmarkProvider <span class="token operator">=</span> <span class="token punctuation">(</span>
                    appModule<span class="token punctuation">.</span>current<span class="token punctuation">.</span>instance <span class="token keyword">as</span> AppModulesInstance<span class="token operator">&lt;</span><span class="token punctuation">[</span>BookmarkModule<span class="token punctuation">]</span><span class="token operator">&gt;</span>
                <span class="token punctuation">)</span><span class="token punctuation">.</span>bookmark<span class="token punctuation">;</span>

            <span class="token keyword">return</span> currentAppBookmarkProvider<span class="token punctuation">.</span>bookmarkCreators
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="setcontextidresolver" tabindex="-1"><a class="header-anchor" href="#setcontextidresolver" aria-hidden="true">#</a> setContextIdResolver</h4><p>Used to over withe the default context id resolver.</p><blockquote><p>param {(() =&gt; string | undefined)} fn - Function for providing current contextId</p></blockquote><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code>    <span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> contextProvider <span class="token operator">=</span> <span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">requireInstance</span><span class="token punctuation">(</span><span class="token string">&#39;context&#39;</span><span class="token punctuation">)</span>
        builder<span class="token punctuation">.</span><span class="token function">setContextIdResolver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
           <span class="token keyword">return</span> contextProvider<span class="token punctuation">.</span>currentContext<span class="token operator">?.</span>id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="setbookmarkqueryclient" tabindex="-1"><a class="header-anchor" href="#setbookmarkqueryclient" aria-hidden="true">#</a> setBookmarkQueryClient</h4><p>Use for override the bookmark query client.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">enableBookmark</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

        builder<span class="token punctuation">.</span><span class="token function">setBookmarkQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            getAllBookmarks<span class="token operator">:</span> <span class="token punctuation">{</span>
                                <span class="token function-variable function">key</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;all-bookmarks&#39;</span><span class="token punctuation">,</span>
                                client<span class="token operator">:</span> <span class="token punctuation">{</span>
                                    fn<span class="token operator">:</span> client<span class="token punctuation">.</span>getAllBookmarks<span class="token punctuation">,</span>
                                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> args <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">.</span>isValid<span class="token punctuation">,</span>
                            <span class="token punctuation">}</span>
             getBookmarkById<span class="token operator">:</span> <span class="token punctuation">{</span>
                                <span class="token function-variable function">key</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> id<span class="token punctuation">,</span>
                                client<span class="token operator">:</span> <span class="token punctuation">{</span>
                                    fn<span class="token operator">:</span> client<span class="token punctuation">.</span>getBookmarkById<span class="token punctuation">,</span>
                                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                expire<span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>
                            <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,38);function S(P,q){const i=r("ModuleBadge"),k=r("Mermaid"),c=r("CodeTabs");return d(),g("div",null,[p(i,{module:"module-bookmark"}),h,m,p(k,{id:"mermaid-8",code:"eNp9kUtugzAQhvecYvZVegAWqUKqVl2kQuUEEzOABXhce0Dt7WsKITykeOn5H99oADx9d2QUvWosHbZRBOFZdKKVtmgEUkAPKTvBZjdLLsMwYa5bdDVcOO8a2quylSoj12u1l50G1cnaEeGThYB7cqEkhncSuE4BHzkUjlvo3AiUXA7H41OSxfBGoqpZBy0J5ig4yv2iNsmC5TAEf5Hnpqe7qWC31q5BsgCiOufI3PZZMKQx8Px/rtCU24igOFekatAFGOx1iaLZgPZgiHLKXx7ox9pQz0boRwbTTD39jfZ0WO4UT0e79ZAHYUBrG63GVm9J6UJTDtffe9RA9s/yvGEJieE6s3sVq0O9M6HM4m7njc+TLMC9hIgo+gNY19Xa"}),f,p(c,{id:"60",data:[{title:"Async"},{title:"Observable"}]},{tab0:s(({title:t,value:o,isActive:e})=>[y]),tab1:s(({title:t,value:o,isActive:e})=>[v]),_:1}),B,p(c,{id:"88",data:[{title:"Async"},{title:"Observable"}]},{tab0:s(({title:t,value:o,isActive:e})=>[x]),tab1:s(({title:t,value:o,isActive:e})=>[w]),_:1}),A,_,p(c,{id:"102",data:[{title:"Async"},{title:"Observable"}]},{tab0:s(({title:t,value:o,isActive:e})=>[C]),tab1:s(({title:t,value:o,isActive:e})=>[I]),_:1}),T])}const U=u(b,[["render",S],["__file","index.html.vue"]]);export{U as default};
