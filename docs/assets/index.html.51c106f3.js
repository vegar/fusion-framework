import{_ as g}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as h,c as f,a,w as e,b as n,d as s,e as t,r as o}from"./app.8852e1cf.js";const x={},m=t('<h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h2><p>By design all instances of the context module is synced by derived modules <code>observer</code> its nearest ancestor current context and ancestors listen to change <code>events</code> that bubbles up.</p><blockquote><ul><li>a module might choose to <code>stopPropagation</code> which will not share it`s context with ancestors and sibling</li><li>a module might choose to <code>preventDefault</code> when an ancestor changes context</li><li>a module might not be able to validate and resolve provided context</li></ul></blockquote>',3),y=t('<div class="custom-container info"><p class="custom-container-title">Parent context changes (triggered initially)</p><p>When parent context changes, <code>setCurrentContext</code>is called with option <code>{ resolve: true, validate: true }</code></p><div class="custom-container warning"><p class="custom-container-title">Incompatible context</p><p>When a child module fails to resolve context parent, current context for the module is <strong>not set!</strong></p><p>read how to configure - <a href="#setresolvecontext">resolve context</a> and <a href="#setvalidatecontext">validate context</a></p></div></div><h3 id="setting-context" tabindex="-1"><a class="header-anchor" href="#setting-context" aria-hidden="true">#</a> Setting context</h3><ul><li><strong>validate</strong> <em>[optional]</em> - will validate context before setting current context</li><li><strong>resolve</strong> <em>[optional]</em> - will try to resolve provided context if validation fails</li></ul>',3),v=t(`<div class="custom-container danger"><p class="custom-container-title">Warning</p><p>by default context <code>bubbles</code>up to ancestors (which is a feature, to allow context between instances), <strong>BUT</strong> if need to constrain context within runtime scope of current modules instance use:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code>modules<span class="token punctuation">.</span>event<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;onCurrentContextChange&#39;</span><span class="token punctuation">,</span> e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>source <span class="token operator">===</span> modules<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><em>we might in future include config flag for propagation</em></p></div><h3 id="resolving-context" tabindex="-1"><a class="header-anchor" href="#resolving-context" aria-hidden="true">#</a> Resolving context</h3><p>When setting context and validation fails, the module will try to resolve a related context</p><div class="custom-container info"><p class="custom-container-title">onSetContextResolve</p><p>before resolving context when setting context, the <code>onSetContextResolve</code> is fired</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/** disable resolve of context, NOT RECOMMENDED */</span>
module<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;onSetContextResolve&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div>`,4),b=t('<div class="custom-container warning"><p class="custom-container-title">Note</p><p>if no context type is configure fo the module, all context will validate , see <a href="#setresolvecontext">configure resolve context</a></p></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2>',2),w=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" enableContext "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@equinor/fusion-framework-module-context'"),n("span",{class:"token punctuation"},";"),s(`
`)])])],-1),C=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" enableContext "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@equinor/fusion-framework-react-module-context'"),n("span",{class:"token punctuation"},";"),s(`
`)])])],-1),_=t(`<div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">enableContext</span><span class="token punctuation">(</span>configurator<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><h4 id="setcontexttype" tabindex="-1"><a class="header-anchor" href="#setcontexttype" aria-hidden="true">#</a> setContextType</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">enableContext</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** optional filter for query types, array of string */</span>
    builder<span class="token punctuation">.</span><span class="token function">setContextType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;project&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>array of context types which queries are filtered by</p><h4 id="setvalidatecontext" tabindex="-1"><a class="header-anchor" href="#setvalidatecontext" aria-hidden="true">#</a> setValidateContext</h4><p>By <em>default</em> the provider will only check if the context item is within provided context types <em>(support legacy usage)</em></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">enableContext</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token function">setValidateContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="setresolvecontext" tabindex="-1"><a class="header-anchor" href="#setresolvecontext" aria-hidden="true">#</a> setResolveContext</h4><p>By <em>default</em> this method will use the <a href="#setcontextclient">query function</a> for resolving related context and return the first valid context item. This option allows the developer to fine tune how related context is resolved.</p><blockquote><p>note this must return an observable, use <code>from</code> when async and <code>of</code> when sync</p></blockquote><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">enableContext</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token function">setValidateContext</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">relatedContexts</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item<span class="token punctuation">,</span> filter<span class="token operator">:</span> myCustomFilter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
        <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateContext</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> value <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&#39;failed to resolve context&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
                    <span class="token string">&#39;ContextProvider::relatedContext&#39;</span><span class="token punctuation">,</span>
                    <span class="token string">&#39;multiple items found 🤣&#39;</span><span class="token punctuation">,</span>
                    values
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="setcontextfilter" tabindex="-1"><a class="header-anchor" href="#setcontextfilter" aria-hidden="true">#</a> setContextFilter</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">enableContext</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** optional filter of query result */</span>
    builder<span class="token punctuation">.</span><span class="token function">setContextFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="setcontextparameterfn" tabindex="-1"><a class="header-anchor" href="#setcontextparameterfn" aria-hidden="true">#</a> setContextParameterFn</h4>`,15),q=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"configure"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("configurator"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"enableContext"),n("span",{class:"token punctuation"},"("),s("configurator"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("builder"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    builder`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setContextParameterFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" search"),n("span",{class:"token punctuation"},","),s(" type "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" args"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token comment"},"// Modify search and type ??"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
          search`),n("span",{class:"token punctuation"},","),s(`
          filter`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
              type`),n("span",{class:"token punctuation"},","),s(`
              externalId`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'foobar36-8890-4b16-b973-9e13b9a72c26'"),s(`
          `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(` 
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),A=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token doc-comment comment"},"/** helper method for generating odata */"),s(`
`),n("span",{class:"token keyword"},"import"),s(" buildQuery "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'odata-query'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"configure"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("configurator"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"enableContext"),n("span",{class:"token punctuation"},"("),s("configurator"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("builder"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    builder`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setContextParameterFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" search"),n("span",{class:"token punctuation"},","),s(" type "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" args"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"buildQuery"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
          search`),n("span",{class:"token punctuation"},","),s(`
          filter`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
              type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                  `),n("span",{class:"token keyword"},"in"),n("span",{class:"token operator"},":"),s(" type"),n("span",{class:"token punctuation"},","),s(`
              `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
          `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(` 
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),P=t(`<div class="custom-container info"><p class="custom-container-title">QueryClient</p><p>currently <code>setContextParameterFn</code> requires an return type of <code>string | QueryContextParameters</code>, but this method is creating the parameters to the query function.</p><p>If using a custom client with custom parameters, use this method to generate the custom parameters.</p><p>If there is a demand for generic query parameters we will in the future make the return type more generic.</p></div><h4 id="setcontextclient" tabindex="-1"><a class="header-anchor" href="#setcontextclient" aria-hidden="true">#</a> setContextClient</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configure</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">enableContext</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** request another module that is enabled */</span>
    <span class="token keyword">const</span> httpProvider <span class="token operator">=</span> <span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">requireInstance</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> client <span class="token operator">=</span> httpProvider<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token string">&#39;my-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 
     * By default the Framework will resolve the context service
     * <span class="token keyword">@see</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> QueryCtorOptions<span class="token punctuation">}</span> for advance configuration of query client
     * <span class="token keyword">@see</span> [ObservableInput - RxJS](https://rxjs.dev/api/index/type-alias/ObservableInput) 
     * <span class="token keyword">@return</span> object for getting and querying context
     */</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">setContextClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> client<span class="token punctuation">.</span><span class="token function">json$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/context/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            client<span class="token punctuation">.</span><span class="token function">json$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/context/search/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
                body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token doc-comment comment">/** optional, note will clear context if invalid context provided **/</span>
        <span class="token function-variable function">resolve</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
            client<span class="token punctuation">.</span><span class="token function">json$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/context/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/resolve/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
                body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>query post request processor, called after query is executed</p><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><h4 id="oncurrentcontextchange" tabindex="-1"><a class="header-anchor" href="#oncurrentcontextchange" aria-hidden="true">#</a> onCurrentContextChange</h4><p>dispatch before current context changes</p><h4 id="oncurrentcontextchanged" tabindex="-1"><a class="header-anchor" href="#oncurrentcontextchanged" aria-hidden="true">#</a> onCurrentContextChanged</h4><p>dispatch when current context changed</p><h4 id="onparentcontextchanged" tabindex="-1"><a class="header-anchor" href="#onparentcontextchanged" aria-hidden="true">#</a> onParentContextChanged</h4><p>dispatch when parent context changed</p><h4 id="onsetcontextresolve" tabindex="-1"><a class="header-anchor" href="#onsetcontextresolve" aria-hidden="true">#</a> onSetContextResolve</h4><p>dispatch before resolving context when setting current context</p><h4 id="onsetcontextresolved" tabindex="-1"><a class="header-anchor" href="#onsetcontextresolved" aria-hidden="true">#</a> onSetContextResolved</h4><p>dispatch when context resolved when setting current context</p><h2 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h2>`,16),R=n("h3",{id:"example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#example","aria-hidden":"true"},"#"),s(" Example")],-1),S={href:"https://github.com/equinor/fusion-framework/tree/main/cookbooks/app-react-context/src",target:"_blank",rel:"noopener noreferrer"},B=t(`<h4 id="config-ts" tabindex="-1"><a class="header-anchor" href="#config-ts" aria-hidden="true">#</a> config.ts</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> AppModuleInitiator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@equinor/fusion-framework-app&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> enableContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@equinor/fusion-framework-react-module-context&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> buildQuery <span class="token keyword">from</span> <span class="token string">&#39;odata-query&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> configure<span class="token operator">:</span> <span class="token function-variable function">AppModuleInitiator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>configurator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">enableContext</span><span class="token punctuation">(</span>configurator<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">setContextType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;orgchart&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set contextType to match against</span>
        builder<span class="token punctuation">.</span><span class="token function">setContextParameterFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> search<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">buildQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                search<span class="token punctuation">,</span>
                filter<span class="token operator">:</span> <span class="token punctuation">{</span>
                    type<span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token keyword">in</span><span class="token operator">:</span> type<span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> configure<span class="token punctuation">;</span>
</code></pre></div><h4 id="app-tsx" tabindex="-1"><a class="header-anchor" href="#app-tsx" aria-hidden="true">#</a> App.tsx</h4><div class="language-tsx" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useModuleCurrentContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@equinor/fusion-framework-react-module-context&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRelatedContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./useRelatedContext&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> currentContext <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useModuleCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// const { value: relatedContext } = useRelatedContext([&#39;EquinorTask&#39;]);</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> relatedContext <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRelatedContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Current Context:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>currentContext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Related Context:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>relatedContext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre></div>`,4);function Q(E,F){const i=o("ModuleBadge"),p=o("Mermaid"),r=o("CodeTabs"),k=o("RouterLink"),d=o("ExternalLinkIcon");return h(),f("div",null,[a(i,{module:"modules/context"}),m,a(p,{id:"mermaid-27",code:"eNqVkTFOxDAQRXtOMbIolmJX2k1qmnAACrpoi4k92ViybGviBCTEGejpuAXn4QJcATtOQFmBEJ2lP2/8ZqY17l52yAHubi4A/B6222vAfXz3Q3Ni9B0Ij0w2bLzjgOZKxCxV1j2FauAUVc4GegjHnBS1cE1PPBK8v7x+vD07u66rOrQnUuI4febLRxpjCL0bWNJTblLGDITSbUuJBM9u1IpYZCYJklUrTdlpozbovdESg3Z2VsV9LZjanVxJXO4i2UvWDc0ieKjFInw7jXzum9sdJjXrAki0kkxMMh8HH9FohYFAZnRhii9mqVigMsn1zsRt/cic19O35C9bzXRe4Nz6v/Dfdal7GsfzdDxS+S7FfJdP4s/LIg=="}),y,a(p,{id:"mermaid-56",code:"eNqNkU1OwzAQhfc5xagrWPQKRY45AbBAsrqwnGkTKbWRY1JQxBnYs+MWnIcLcAUcj926/90lme/Ne2+yaM1a1dI6eLovAJjo0PFXa1E7brTDNzeH6XQG5aDM6kVa/PBU6T+BNg5W0qm60UtQJAFFGpKwoZdtU0mHdxtVUBzFn0sRX+fFSDMyCTPsPc3E5Pfr++/n0+jdhLyWeomTICMyiDgTvpmfJBtqkvtkPCipFbZYEcSFq61ZA1prbBboHbtYzsdJ9WKOm1ufYQQDmYYbng0WO9P28RpELWRzyjMw+6ajbbrCo/9V5PxAi5P9dZvpSuHJL43ZDqrQssvHSeRl29z3XJtqG+GKEDk5A1b8A4vA5rA="}),v,a(p,{id:"mermaid-78",code:"eNpNzDEOwjAMheE9p4g8wdCBHoCFlYk16mAaR0QKseS4hePjVi3q/L73p8Kf8YWi/v5wDi8BhBqXmW5clb56OsPgu+7qsV+mgkpxmxoMDnsbPaRclAQ2iAFmLDma3StZ6W0l87gehHSSuh+ewQrS1C/soEiE/9UxQOVVNJ94qtHgD6QkO2o="}),b,a(r,{id:"87",data:[{title:"poj"},{title:"react"}]},{tab0:e(({title:c,value:u,isActive:l})=>[w]),tab1:e(({title:c,value:u,isActive:l})=>[C]),_:1}),_,n("p",null,[s("Set method which generates the parameters for the query function. see "),a(k,{to:"/modules/services/context/#query-context"},{default:e(()=>[s("Query Context")]),_:1}),s(".")]),a(r,{id:"135",data:[{title:"Standard"},{title:"OData"}]},{tab0:e(({title:c,value:u,isActive:l})=>[q]),tab1:e(({title:c,value:u,isActive:l})=>[A]),_:1}),P,a(i,{module:"react/modules/context"}),R,n("blockquote",null,[n("p",null,[n("a",S,[s("cookbook -see example"),a(d)])])]),B])}const M=g(x,[["render",Q],["__file","index.html.vue"]]);export{M as default};
