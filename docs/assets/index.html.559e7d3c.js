import{_ as k}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as d,a as p,w as a,b as n,d as s,e as r,r as l}from"./app.0c2fbc1c.js";const g={},h=n("h2",{id:"configuration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),s(" Configuration")],-1),f=n("p",null,"by default this module does not require any configuration if the Service discovery module is configured for the portal or the application.",-1),y=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" enableServices "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@equinor/fusion-framework-module-services'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token punctuation"},"("),s("configurator"),n("span",{class:"token operator"},":"),s(" IAppConfigurator"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"enableServices"),n("span",{class:"token punctuation"},"("),s("configurator"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])])],-1),m=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" configureServices "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@equinor/fusion-framework-module-services'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token punctuation"},"("),s("configurator"),n("span",{class:"token operator"},":"),s(" IAppConfigurator"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  configurator`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addConfig"),n("span",{class:"token punctuation"},"("),s(`
    `),n("span",{class:"token function"},"configureServices"),n("span",{class:"token punctuation"},"("),s("config "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
      config`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createClient"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),v=r(`<h3 id="httpclient" tabindex="-1"><a class="header-anchor" href="#httpclient" aria-hidden="true">#</a> HttpClient</h3><div class="custom-container warning"><p class="custom-container-title">createClient</p><p>Only works if not <code>createClient</code> on the config object is overridden</p></div><p>By default the module will first try to load a named client from the <a href="../http#configure">HttpProvider</a>.</p><p>If no client is defined, the <a href="../service-discovery">Service Discovery Module</a> will try to resolve the service.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="create-client" tabindex="-1"><a class="header-anchor" href="#create-client" aria-hidden="true">#</a> Create client</h3><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">createContextClient<span class="token operator">&lt;</span>TMethod <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ClientMethod<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token doc-comment comment">/** execution method, defaults to \`json\` */</span>
  method<span class="token operator">:</span> TMethod
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ApiServices<span class="token operator">&lt;</span>IHttpClient<span class="token punctuation">,</span> TMethod<span class="token operator">&gt;</span><span class="token punctuation">[</span>TService<span class="token punctuation">]</span><span class="token operator">&gt;</span>

<span class="token keyword">type</span> <span class="token class-name">ClientMethod<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    fetch<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>FetchResponse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
    json<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    fetch$<span class="token operator">:</span> StreamResponse<span class="token operator">&lt;</span>FetchResponse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
    json$<span class="token operator">:</span> StreamResponse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,7),w=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" apiClient "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(" serviceProvider"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createContextClient"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'json'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" apiClient "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(" serviceProvider"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createContextClient"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'fetch'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])])],-1),x=n("div",{class:"language-typescript","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" apiClient "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(" serviceProvider"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createContextClient"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'json$'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" apiClient "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(" serviceProvider"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createContextClient"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'fetch$'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])])],-1),C=r(`<div class="custom-container warning"><p class="custom-container-title">Fetch</p><p>when using the fetch method on api client, you need to parse the response and set request headers for json</p></div><h3 id="execute-api-request" tabindex="-1"><a class="header-anchor" href="#execute-api-request" aria-hidden="true">#</a> Execute api request</h3><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ApiMethod<span class="token operator">&lt;</span>
  TVersion <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> ApiVersion<span class="token punctuation">,</span>
  <span class="token doc-comment comment">/** defaults to type map provided version */</span>
  TResult <span class="token operator">=</span> ApiFunctionResponse<span class="token operator">&lt;</span>TVersion<span class="token operator">&gt;</span>
<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>
    version<span class="token operator">:</span> TVersion<span class="token punctuation">,</span>
    <span class="token doc-comment comment">/** parameters for call function */</span>
    <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span>ApiFunction<span class="token operator">&lt;</span>TVersion<span class="token punctuation">,</span> TMethod<span class="token punctuation">,</span> TClient<span class="token punctuation">,</span> TResult<span class="token operator">&gt;&gt;</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ApiFunctionResult<span class="token operator">&lt;</span>TVersion<span class="token punctuation">,</span> TMethod<span class="token punctuation">,</span> TResult<span class="token operator">&gt;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@see</span> context/get-context/client
 * <span class="token keyword">@note</span> data type if only for illustrting what the api client resolves the return type to be
 */</span>
<span class="token keyword">const</span> data_v1<span class="token operator">:</span> ApiContextEntity_v1 <span class="token operator">=</span> <span class="token keyword">await</span> apiClient<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;v1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;eee&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data_v2<span class="token operator">:</span> ApiContextEntity_v2 <span class="token operator">=</span> <span class="token keyword">await</span> apiClient<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;v2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;eee&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * custom selector
 * <span class="token keyword">@note</span> the api method will resolve the return type from the selector
 */</span>
<span class="token keyword">const</span> data_v2<span class="token operator">:</span> MyApiContextEntity_v3_beta <span class="token operator">=</span> <span class="token keyword">await</span> apiClient<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&#39;v2_beta&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;eee&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">selector</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> FetchResponse<span class="token operator">&lt;</span>ApiContextEntity_v2<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyApiContextEntity_v3_beta</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="advanced" tabindex="-1"><a class="header-anchor" href="#advanced" aria-hidden="true">#</a> Advanced</h2><h3 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> client</h3><p>For service endpoints exposed, there is a client method for executing the request</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * create a reusable function for api calls
 *
 * <span class="token keyword">@template</span> TVersion - version of the endpoint
 * <span class="token keyword">@template</span> TMethod - call method of the http client, defaults to json
 * <span class="token keyword">@template</span> TClient - IHttpClient which will execute the request
 */</span>
<span class="token keyword">type</span> <span class="token class-name">Query</span> <span class="token operator">=</span>
  <span class="token operator">&lt;</span>
    TVersion <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> ApiVersion<span class="token punctuation">,</span>
    TMethod <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ClientMethod <span class="token operator">=</span> <span class="token keyword">keyof</span> ClientMethod<span class="token punctuation">,</span>
    TClient <span class="token keyword">extends</span> <span class="token class-name">IHttpClient</span> <span class="token operator">=</span> IHttpClient
  <span class="token operator">&gt;</span><span class="token punctuation">(</span>
    client<span class="token operator">:</span> TClient<span class="token punctuation">,</span>
    version<span class="token operator">:</span> TVersion<span class="token punctuation">,</span>
    method<span class="token operator">:</span> TMethod <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span> <span class="token keyword">as</span> TMethod
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@template</span> T - return type from execution to the endpoint
     */</span>
    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> QueryContextResponse<span class="token operator">&lt;</span>TVersion<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>
      args<span class="token operator">:</span> QueryArgs<span class="token operator">&lt;</span>TVersion<span class="token operator">&gt;</span><span class="token punctuation">,</span>
      init<span class="token operator">?</span><span class="token operator">:</span> ClientRequestInit<span class="token operator">&lt;</span>TClient<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token operator">:</span> QueryResult<span class="token operator">&lt;</span>TVersion<span class="token punctuation">,</span> TMethod<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span>
</code></pre></div><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> example</h4><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@equinor/fusion-framework-module/service/context/get&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getContext</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">&#39;v1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="generate-parameters" tabindex="-1"><a class="header-anchor" href="#generate-parameters" aria-hidden="true">#</a> generate parameters</h3><p>Method for generating endpoint and arguments for service.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> generateParameters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@equinor/fusion-framework-module/service/context/get&#39;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** IHttpClient */</span>
<span class="token keyword">const</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">generateParameters</span><span class="token punctuation">(</span><span class="token string">&#39;v1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="generate-endpoint" tabindex="-1"><a class="header-anchor" href="#generate-endpoint" aria-hidden="true">#</a> generate endpoint</h3><p>Method for generating endpoint for service</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> generateEndpoint <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@equinor/fusion-framework-module/service/context/get&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> endpoint <span class="token operator">=</span> <span class="token function">generateEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;v1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,15);function _(T,b){const i=l("ModuleBadge"),c=l("CodeTabs");return u(),d("div",null,[p(i,{module:"module-services"}),h,f,p(c,{id:"8",data:[{title:"Basic"},{title:"Custom"}],active:0},{tab0:a(({title:t,value:e,isActive:o})=>[y]),tab1:a(({title:t,value:e,isActive:o})=>[m]),_:1}),v,p(c,{id:"37",data:[{title:"Async"},{title:"Observable"}],active:0,"tab-id":"flow"},{tab0:a(({title:t,value:e,isActive:o})=>[w]),tab1:a(({title:t,value:e,isActive:o})=>[x]),_:1}),C])}const V=k(g,[["render",_],["__file","index.html.vue"]]);export{V as default};
